// Code generated by fastssz. DO NOT EDIT.
// Hash: 568e932e3dc992abf12a77dceafb1509dc3ebefdb264e9a5014e0e23542e47c4
// Version: 0.1.3
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/bellatrix"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
	"github.com/holiman/uint256"
)

// MarshalSSZ ssz marshals the GnosisBeaconBlock object
func (g *GnosisBeaconBlock) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(g)
}

// MarshalSSZTo ssz marshals the GnosisBeaconBlock object to a target array
func (g *GnosisBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(84)

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(g.Slot))

	// Field (1) 'ProposerIndex'
	dst = ssz.MarshalUint64(dst, uint64(g.ProposerIndex))

	// Field (2) 'ParentRoot'
	dst = append(dst, g.ParentRoot[:]...)

	// Field (3) 'StateRoot'
	dst = append(dst, g.StateRoot[:]...)

	// Offset (4) 'Body'
	dst = ssz.WriteOffset(dst, offset)

	// Field (4) 'Body'
	if dst, err = g.Body.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the GnosisBeaconBlock object
func (g *GnosisBeaconBlock) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 84 {
		return ssz.ErrSize
	}

	tail := buf
	var o4 uint64

	// Field (0) 'Slot'
	g.Slot = phase0.Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'ProposerIndex'
	g.ProposerIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'ParentRoot'
	copy(g.ParentRoot[:], buf[16:48])

	// Field (3) 'StateRoot'
	copy(g.StateRoot[:], buf[48:80])

	// Offset (4) 'Body'
	if o4 = ssz.ReadOffset(buf[80:84]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 != 84 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'Body'
	{
		buf = tail[o4:]
		if g.Body == nil {
			g.Body = new(GnosisBeaconBlockBody)
		}
		if err = g.Body.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the GnosisBeaconBlock object
func (g *GnosisBeaconBlock) SizeSSZ() (size int) {
	size = 84

	// Field (4) 'Body'
	if g.Body == nil {
		g.Body = new(GnosisBeaconBlockBody)
	}
	size += g.Body.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the GnosisBeaconBlock object
func (g *GnosisBeaconBlock) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(g)
}

// HashTreeRootWith ssz hashes the GnosisBeaconBlock object with a hasher
func (g *GnosisBeaconBlock) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(g.Slot))

	// Field (1) 'ProposerIndex'
	hh.PutUint64(uint64(g.ProposerIndex))

	// Field (2) 'ParentRoot'
	hh.PutBytes(g.ParentRoot[:])

	// Field (3) 'StateRoot'
	hh.PutBytes(g.StateRoot[:])

	// Field (4) 'Body'
	if err = g.Body.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the GnosisBeaconBlock object
func (g *GnosisBeaconBlock) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(g)
}

// MarshalSSZ ssz marshals the GnosisBeaconBlockBody object
func (g *GnosisBeaconBlockBody) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(g)
}

// MarshalSSZTo ssz marshals the GnosisBeaconBlockBody object to a target array
func (g *GnosisBeaconBlockBody) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(392)

	// Field (0) 'RANDAOReveal'
	dst = append(dst, g.RANDAOReveal[:]...)

	// Field (1) 'ETH1Data'
	if g.ETH1Data == nil {
		g.ETH1Data = new(phase0.ETH1Data)
	}
	if dst, err = g.ETH1Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Graffiti'
	dst = append(dst, g.Graffiti[:]...)

	// Offset (3) 'ProposerSlashings'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(g.ProposerSlashings) * 416

	// Offset (4) 'AttesterSlashings'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(g.AttesterSlashings); ii++ {
		offset += 4
		offset += g.AttesterSlashings[ii].SizeSSZ()
	}

	// Offset (5) 'Attestations'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(g.Attestations); ii++ {
		offset += 4
		offset += g.Attestations[ii].SizeSSZ()
	}

	// Offset (6) 'Deposits'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(g.Deposits) * 1240

	// Offset (7) 'VoluntaryExits'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(g.VoluntaryExits) * 112

	// Field (8) 'SyncAggregate'
	if g.SyncAggregate == nil {
		g.SyncAggregate = new(altair.SyncAggregate)
	}
	if dst, err = g.SyncAggregate.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (9) 'ExecutionPayload'
	dst = ssz.WriteOffset(dst, offset)
	if g.ExecutionPayload == nil {
		g.ExecutionPayload = new(GnosisExecutionPayload)
	}
	offset += g.ExecutionPayload.SizeSSZ()

	// Offset (10) 'BLSToExecutionChanges'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(g.BLSToExecutionChanges) * 172

	// Offset (11) 'BlobKZGCommitments'
	dst = ssz.WriteOffset(dst, offset)

	// Field (3) 'ProposerSlashings'
	if size := len(g.ProposerSlashings); size > 16 {
		err = ssz.ErrListTooBigFn("GnosisBeaconBlockBody.ProposerSlashings", size, 16)
		return
	}
	for ii := 0; ii < len(g.ProposerSlashings); ii++ {
		if dst, err = g.ProposerSlashings[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (4) 'AttesterSlashings'
	if size := len(g.AttesterSlashings); size > 2 {
		err = ssz.ErrListTooBigFn("GnosisBeaconBlockBody.AttesterSlashings", size, 2)
		return
	}
	{
		offset = 4 * len(g.AttesterSlashings)
		for ii := 0; ii < len(g.AttesterSlashings); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += g.AttesterSlashings[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(g.AttesterSlashings); ii++ {
		if dst, err = g.AttesterSlashings[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (5) 'Attestations'
	if size := len(g.Attestations); size > 128 {
		err = ssz.ErrListTooBigFn("GnosisBeaconBlockBody.Attestations", size, 128)
		return
	}
	{
		offset = 4 * len(g.Attestations)
		for ii := 0; ii < len(g.Attestations); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += g.Attestations[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(g.Attestations); ii++ {
		if dst, err = g.Attestations[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (6) 'Deposits'
	if size := len(g.Deposits); size > 16 {
		err = ssz.ErrListTooBigFn("GnosisBeaconBlockBody.Deposits", size, 16)
		return
	}
	for ii := 0; ii < len(g.Deposits); ii++ {
		if dst, err = g.Deposits[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (7) 'VoluntaryExits'
	if size := len(g.VoluntaryExits); size > 16 {
		err = ssz.ErrListTooBigFn("GnosisBeaconBlockBody.VoluntaryExits", size, 16)
		return
	}
	for ii := 0; ii < len(g.VoluntaryExits); ii++ {
		if dst, err = g.VoluntaryExits[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (9) 'ExecutionPayload'
	if dst, err = g.ExecutionPayload.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (10) 'BLSToExecutionChanges'
	if size := len(g.BLSToExecutionChanges); size > 16 {
		err = ssz.ErrListTooBigFn("GnosisBeaconBlockBody.BLSToExecutionChanges", size, 16)
		return
	}
	for ii := 0; ii < len(g.BLSToExecutionChanges); ii++ {
		if dst, err = g.BLSToExecutionChanges[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (11) 'BlobKZGCommitments'
	if size := len(g.BlobKZGCommitments); size > 4096 {
		err = ssz.ErrListTooBigFn("GnosisBeaconBlockBody.BlobKZGCommitments", size, 4096)
		return
	}
	for ii := 0; ii < len(g.BlobKZGCommitments); ii++ {
		dst = append(dst, g.BlobKZGCommitments[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the GnosisBeaconBlockBody object
func (g *GnosisBeaconBlockBody) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 392 {
		return ssz.ErrSize
	}

	tail := buf
	var o3, o4, o5, o6, o7, o9, o10, o11 uint64

	// Field (0) 'RANDAOReveal'
	copy(g.RANDAOReveal[:], buf[0:96])

	// Field (1) 'ETH1Data'
	if g.ETH1Data == nil {
		g.ETH1Data = new(phase0.ETH1Data)
	}
	if err = g.ETH1Data.UnmarshalSSZ(buf[96:168]); err != nil {
		return err
	}

	// Field (2) 'Graffiti'
	copy(g.Graffiti[:], buf[168:200])

	// Offset (3) 'ProposerSlashings'
	if o3 = ssz.ReadOffset(buf[200:204]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 != 392 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (4) 'AttesterSlashings'
	if o4 = ssz.ReadOffset(buf[204:208]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Offset (5) 'Attestations'
	if o5 = ssz.ReadOffset(buf[208:212]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Offset (6) 'Deposits'
	if o6 = ssz.ReadOffset(buf[212:216]); o6 > size || o5 > o6 {
		return ssz.ErrOffset
	}

	// Offset (7) 'VoluntaryExits'
	if o7 = ssz.ReadOffset(buf[216:220]); o7 > size || o6 > o7 {
		return ssz.ErrOffset
	}

	// Field (8) 'SyncAggregate'
	if g.SyncAggregate == nil {
		g.SyncAggregate = new(altair.SyncAggregate)
	}
	if err = g.SyncAggregate.UnmarshalSSZ(buf[220:380]); err != nil {
		return err
	}

	// Offset (9) 'ExecutionPayload'
	if o9 = ssz.ReadOffset(buf[380:384]); o9 > size || o7 > o9 {
		return ssz.ErrOffset
	}

	// Offset (10) 'BLSToExecutionChanges'
	if o10 = ssz.ReadOffset(buf[384:388]); o10 > size || o9 > o10 {
		return ssz.ErrOffset
	}

	// Offset (11) 'BlobKZGCommitments'
	if o11 = ssz.ReadOffset(buf[388:392]); o11 > size || o10 > o11 {
		return ssz.ErrOffset
	}

	// Field (3) 'ProposerSlashings'
	{
		buf = tail[o3:o4]
		num, err := ssz.DivideInt2(len(buf), 416, 16)
		if err != nil {
			return err
		}
		g.ProposerSlashings = make([]*phase0.ProposerSlashing, num)
		for ii := 0; ii < num; ii++ {
			if g.ProposerSlashings[ii] == nil {
				g.ProposerSlashings[ii] = new(phase0.ProposerSlashing)
			}
			if err = g.ProposerSlashings[ii].UnmarshalSSZ(buf[ii*416 : (ii+1)*416]); err != nil {
				return err
			}
		}
	}

	// Field (4) 'AttesterSlashings'
	{
		buf = tail[o4:o5]
		num, err := ssz.DecodeDynamicLength(buf, 2)
		if err != nil {
			return err
		}
		g.AttesterSlashings = make([]*AttesterSlashing, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if g.AttesterSlashings[indx] == nil {
				g.AttesterSlashings[indx] = new(AttesterSlashing)
			}
			if err = g.AttesterSlashings[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (5) 'Attestations'
	{
		buf = tail[o5:o6]
		num, err := ssz.DecodeDynamicLength(buf, 128)
		if err != nil {
			return err
		}
		g.Attestations = make([]*Attestation, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if g.Attestations[indx] == nil {
				g.Attestations[indx] = new(Attestation)
			}
			if err = g.Attestations[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (6) 'Deposits'
	{
		buf = tail[o6:o7]
		num, err := ssz.DivideInt2(len(buf), 1240, 16)
		if err != nil {
			return err
		}
		g.Deposits = make([]*phase0.Deposit, num)
		for ii := 0; ii < num; ii++ {
			if g.Deposits[ii] == nil {
				g.Deposits[ii] = new(phase0.Deposit)
			}
			if err = g.Deposits[ii].UnmarshalSSZ(buf[ii*1240 : (ii+1)*1240]); err != nil {
				return err
			}
		}
	}

	// Field (7) 'VoluntaryExits'
	{
		buf = tail[o7:o9]
		num, err := ssz.DivideInt2(len(buf), 112, 16)
		if err != nil {
			return err
		}
		g.VoluntaryExits = make([]*phase0.SignedVoluntaryExit, num)
		for ii := 0; ii < num; ii++ {
			if g.VoluntaryExits[ii] == nil {
				g.VoluntaryExits[ii] = new(phase0.SignedVoluntaryExit)
			}
			if err = g.VoluntaryExits[ii].UnmarshalSSZ(buf[ii*112 : (ii+1)*112]); err != nil {
				return err
			}
		}
	}

	// Field (9) 'ExecutionPayload'
	{
		buf = tail[o9:o10]
		if g.ExecutionPayload == nil {
			g.ExecutionPayload = new(GnosisExecutionPayload)
		}
		if err = g.ExecutionPayload.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (10) 'BLSToExecutionChanges'
	{
		buf = tail[o10:o11]
		num, err := ssz.DivideInt2(len(buf), 172, 16)
		if err != nil {
			return err
		}
		g.BLSToExecutionChanges = make([]*capella.SignedBLSToExecutionChange, num)
		for ii := 0; ii < num; ii++ {
			if g.BLSToExecutionChanges[ii] == nil {
				g.BLSToExecutionChanges[ii] = new(capella.SignedBLSToExecutionChange)
			}
			if err = g.BLSToExecutionChanges[ii].UnmarshalSSZ(buf[ii*172 : (ii+1)*172]); err != nil {
				return err
			}
		}
	}

	// Field (11) 'BlobKZGCommitments'
	{
		buf = tail[o11:]
		num, err := ssz.DivideInt2(len(buf), 48, 4096)
		if err != nil {
			return err
		}
		g.BlobKZGCommitments = make([]deneb.KZGCommitment, num)
		for ii := 0; ii < num; ii++ {
			copy(g.BlobKZGCommitments[ii][:], buf[ii*48:(ii+1)*48])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the GnosisBeaconBlockBody object
func (g *GnosisBeaconBlockBody) SizeSSZ() (size int) {
	size = 392

	// Field (3) 'ProposerSlashings'
	size += len(g.ProposerSlashings) * 416

	// Field (4) 'AttesterSlashings'
	for ii := 0; ii < len(g.AttesterSlashings); ii++ {
		size += 4
		size += g.AttesterSlashings[ii].SizeSSZ()
	}

	// Field (5) 'Attestations'
	for ii := 0; ii < len(g.Attestations); ii++ {
		size += 4
		size += g.Attestations[ii].SizeSSZ()
	}

	// Field (6) 'Deposits'
	size += len(g.Deposits) * 1240

	// Field (7) 'VoluntaryExits'
	size += len(g.VoluntaryExits) * 112

	// Field (9) 'ExecutionPayload'
	if g.ExecutionPayload == nil {
		g.ExecutionPayload = new(GnosisExecutionPayload)
	}
	size += g.ExecutionPayload.SizeSSZ()

	// Field (10) 'BLSToExecutionChanges'
	size += len(g.BLSToExecutionChanges) * 172

	// Field (11) 'BlobKZGCommitments'
	size += len(g.BlobKZGCommitments) * 48

	return
}

// HashTreeRoot ssz hashes the GnosisBeaconBlockBody object
func (g *GnosisBeaconBlockBody) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(g)
}

// HashTreeRootWith ssz hashes the GnosisBeaconBlockBody object with a hasher
func (g *GnosisBeaconBlockBody) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'RANDAOReveal'
	hh.PutBytes(g.RANDAOReveal[:])

	// Field (1) 'ETH1Data'
	if g.ETH1Data == nil {
		g.ETH1Data = new(phase0.ETH1Data)
	}
	if err = g.ETH1Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'Graffiti'
	hh.PutBytes(g.Graffiti[:])

	// Field (3) 'ProposerSlashings'
	{
		subIndx := hh.Index()
		num := uint64(len(g.ProposerSlashings))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range g.ProposerSlashings {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	// Field (4) 'AttesterSlashings'
	{
		subIndx := hh.Index()
		num := uint64(len(g.AttesterSlashings))
		if num > 2 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range g.AttesterSlashings {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 2)
	}

	// Field (5) 'Attestations'
	{
		subIndx := hh.Index()
		num := uint64(len(g.Attestations))
		if num > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range g.Attestations {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 128)
	}

	// Field (6) 'Deposits'
	{
		subIndx := hh.Index()
		num := uint64(len(g.Deposits))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range g.Deposits {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	// Field (7) 'VoluntaryExits'
	{
		subIndx := hh.Index()
		num := uint64(len(g.VoluntaryExits))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range g.VoluntaryExits {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	// Field (8) 'SyncAggregate'
	if g.SyncAggregate == nil {
		g.SyncAggregate = new(altair.SyncAggregate)
	}
	if err = g.SyncAggregate.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (9) 'ExecutionPayload'
	if err = g.ExecutionPayload.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (10) 'BLSToExecutionChanges'
	{
		subIndx := hh.Index()
		num := uint64(len(g.BLSToExecutionChanges))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range g.BLSToExecutionChanges {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	// Field (11) 'BlobKZGCommitments'
	{
		if size := len(g.BlobKZGCommitments); size > 4096 {
			err = ssz.ErrListTooBigFn("GnosisBeaconBlockBody.BlobKZGCommitments", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range g.BlobKZGCommitments {
			hh.PutBytes(i[:])
		}
		numItems := uint64(len(g.BlobKZGCommitments))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the GnosisBeaconBlockBody object
func (g *GnosisBeaconBlockBody) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(g)
}

// MarshalSSZ ssz marshals the GnosisExecutionPayload object
func (g *GnosisExecutionPayload) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(g)
}

// MarshalSSZTo ssz marshals the GnosisExecutionPayload object to a target array
func (g *GnosisExecutionPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(528)

	// Field (0) 'ParentHash'
	dst = append(dst, g.ParentHash[:]...)

	// Field (1) 'FeeRecipient'
	dst = append(dst, g.FeeRecipient[:]...)

	// Field (2) 'StateRoot'
	dst = append(dst, g.StateRoot[:]...)

	// Field (3) 'ReceiptsRoot'
	dst = append(dst, g.ReceiptsRoot[:]...)

	// Field (4) 'LogsBloom'
	dst = append(dst, g.LogsBloom[:]...)

	// Field (5) 'PrevRandao'
	dst = append(dst, g.PrevRandao[:]...)

	// Field (6) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, g.BlockNumber)

	// Field (7) 'GasLimit'
	dst = ssz.MarshalUint64(dst, g.GasLimit)

	// Field (8) 'GasUsed'
	dst = ssz.MarshalUint64(dst, g.GasUsed)

	// Field (9) 'Timestamp'
	dst = ssz.MarshalUint64(dst, g.Timestamp)

	// Offset (10) 'ExtraData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(g.ExtraData)

	// Field (11) 'BaseFeePerGas'
	baseFeePerGas := g.BaseFeePerGas.Bytes32()
	for i := 0; i < 32; i++ {
		dst = append(dst, baseFeePerGas[31-i])
	}

	// Field (12) 'BlockHash'
	dst = append(dst, g.BlockHash[:]...)

	// Offset (13) 'Transactions'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(g.Transactions); ii++ {
		offset += 4
		offset += len(g.Transactions[ii])
	}

	// Offset (14) 'Withdrawals'
	dst = ssz.WriteOffset(dst, offset)

	// Field (15) 'BlobGasUsed'
	dst = ssz.MarshalUint64(dst, g.BlobGasUsed)

	// Field (16) 'ExcessBlobGas'
	dst = ssz.MarshalUint64(dst, g.ExcessBlobGas)

	// Field (10) 'ExtraData'
	if size := len(g.ExtraData); size > 32 {
		err = ssz.ErrBytesLengthFn("GnosisExecutionPayload.ExtraData", size, 32)
		return
	}
	dst = append(dst, g.ExtraData...)

	// Field (13) 'Transactions'
	if size := len(g.Transactions); size > 1048576 {
		err = ssz.ErrListTooBigFn("GnosisExecutionPayload.Transactions", size, 1048576)
		return
	}
	{
		offset = 4 * len(g.Transactions)
		for ii := 0; ii < len(g.Transactions); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(g.Transactions[ii])
		}
	}
	for ii := 0; ii < len(g.Transactions); ii++ {
		if size := len(g.Transactions[ii]); size > 1073741824 {
			err = ssz.ErrBytesLengthFn("GnosisExecutionPayload.Transactions[ii]", size, 1073741824)
			return
		}
		dst = append(dst, g.Transactions[ii]...)
	}

	// Field (14) 'Withdrawals'
	if size := len(g.Withdrawals); size > 8 {
		err = ssz.ErrListTooBigFn("GnosisExecutionPayload.Withdrawals", size, 8)
		return
	}
	for ii := 0; ii < len(g.Withdrawals); ii++ {
		if dst, err = g.Withdrawals[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the GnosisExecutionPayload object
func (g *GnosisExecutionPayload) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 528 {
		return ssz.ErrSize
	}

	tail := buf
	var o10, o13, o14 uint64

	// Field (0) 'ParentHash'
	copy(g.ParentHash[:], buf[0:32])

	// Field (1) 'FeeRecipient'
	copy(g.FeeRecipient[:], buf[32:52])

	// Field (2) 'StateRoot'
	copy(g.StateRoot[:], buf[52:84])

	// Field (3) 'ReceiptsRoot'
	copy(g.ReceiptsRoot[:], buf[84:116])

	// Field (4) 'LogsBloom'
	copy(g.LogsBloom[:], buf[116:372])

	// Field (5) 'PrevRandao'
	copy(g.PrevRandao[:], buf[372:404])

	// Field (6) 'BlockNumber'
	g.BlockNumber = ssz.UnmarshallUint64(buf[404:412])

	// Field (7) 'GasLimit'
	g.GasLimit = ssz.UnmarshallUint64(buf[412:420])

	// Field (8) 'GasUsed'
	g.GasUsed = ssz.UnmarshallUint64(buf[420:428])

	// Field (9) 'Timestamp'
	g.Timestamp = ssz.UnmarshallUint64(buf[428:436])

	// Offset (10) 'ExtraData'
	if o10 = ssz.ReadOffset(buf[436:440]); o10 > size {
		return ssz.ErrOffset
	}

	if o10 != 528 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (11) 'BaseFeePerGas'
	baseFeePerGasBE := make([]byte, 32)
	for i := 0; i < 32; i++ {
		baseFeePerGasBE[i] = buf[471-i]
	}
	g.BaseFeePerGas = &uint256.Int{}
	g.BaseFeePerGas.SetBytes32(baseFeePerGasBE)

	// Field (12) 'BlockHash'
	copy(g.BlockHash[:], buf[472:504])

	// Offset (13) 'Transactions'
	if o13 = ssz.ReadOffset(buf[504:508]); o13 > size || o10 > o13 {
		return ssz.ErrOffset
	}

	// Offset (14) 'Withdrawals'
	if o14 = ssz.ReadOffset(buf[508:512]); o14 > size || o13 > o14 {
		return ssz.ErrOffset
	}

	// Field (15) 'BlobGasUsed'
	g.BlobGasUsed = ssz.UnmarshallUint64(buf[512:520])

	// Field (16) 'ExcessBlobGas'
	g.ExcessBlobGas = ssz.UnmarshallUint64(buf[520:528])

	// Field (10) 'ExtraData'
	{
		buf = tail[o10:o13]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(g.ExtraData) == 0 {
			g.ExtraData = make([]byte, 0, len(buf))
		}
		g.ExtraData = append(g.ExtraData, buf...)
	}

	// Field (13) 'Transactions'
	{
		buf = tail[o13:o14]
		num, err := ssz.DecodeDynamicLength(buf, 1048576)
		if err != nil {
			return err
		}
		g.Transactions = make([]bellatrix.Transaction, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1073741824 {
				return ssz.ErrBytesLength
			}
			if cap(g.Transactions[indx]) == 0 {
				g.Transactions[indx] = bellatrix.Transaction(make([]byte, 0, len(buf)))
			}
			g.Transactions[indx] = append(g.Transactions[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (14) 'Withdrawals'
	{
		buf = tail[o14:]
		num, err := ssz.DivideInt2(len(buf), 44, 8)
		if err != nil {
			return err
		}
		g.Withdrawals = make([]*capella.Withdrawal, num)
		for ii := 0; ii < num; ii++ {
			if g.Withdrawals[ii] == nil {
				g.Withdrawals[ii] = new(capella.Withdrawal)
			}
			if err = g.Withdrawals[ii].UnmarshalSSZ(buf[ii*44 : (ii+1)*44]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the GnosisExecutionPayload object
func (g *GnosisExecutionPayload) SizeSSZ() (size int) {
	size = 528

	// Field (10) 'ExtraData'
	size += len(g.ExtraData)

	// Field (13) 'Transactions'
	for ii := 0; ii < len(g.Transactions); ii++ {
		size += 4
		size += len(g.Transactions[ii])
	}

	// Field (14) 'Withdrawals'
	size += len(g.Withdrawals) * 44

	return
}

// HashTreeRoot ssz hashes the GnosisExecutionPayload object
func (g *GnosisExecutionPayload) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(g)
}

// HashTreeRootWith ssz hashes the GnosisExecutionPayload object with a hasher
func (g *GnosisExecutionPayload) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ParentHash'
	hh.PutBytes(g.ParentHash[:])

	// Field (1) 'FeeRecipient'
	hh.PutBytes(g.FeeRecipient[:])

	// Field (2) 'StateRoot'
	hh.PutBytes(g.StateRoot[:])

	// Field (3) 'ReceiptsRoot'
	hh.PutBytes(g.ReceiptsRoot[:])

	// Field (4) 'LogsBloom'
	hh.PutBytes(g.LogsBloom[:])

	// Field (5) 'PrevRandao'
	hh.PutBytes(g.PrevRandao[:])

	// Field (6) 'BlockNumber'
	hh.PutUint64(g.BlockNumber)

	// Field (7) 'GasLimit'
	hh.PutUint64(g.GasLimit)

	// Field (8) 'GasUsed'
	hh.PutUint64(g.GasUsed)

	// Field (9) 'Timestamp'
	hh.PutUint64(g.Timestamp)

	// Field (10) 'ExtraData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(g.ExtraData))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(g.ExtraData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	// Field (11) 'BaseFeePerGas'
	baseFeePerGas := make([]byte, 32)
	baseFeePerGasBE := g.BaseFeePerGas.Bytes32()
	for i := 0; i < 32; i++ {
		baseFeePerGas[i] = baseFeePerGasBE[31-i]
	}
	hh.PutBytes(baseFeePerGas)

	// Field (12) 'BlockHash'
	hh.PutBytes(g.BlockHash[:])

	// Field (13) 'Transactions'
	{
		subIndx := hh.Index()
		num := uint64(len(g.Transactions))
		if num > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range g.Transactions {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1073741824 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1073741824+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1048576)
	}

	// Field (14) 'Withdrawals'
	{
		subIndx := hh.Index()
		num := uint64(len(g.Withdrawals))
		if num > 8 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range g.Withdrawals {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 8)
	}

	// Field (15) 'BlobGasUsed'
	hh.PutUint64(g.BlobGasUsed)

	// Field (16) 'ExcessBlobGas'
	hh.PutUint64(g.ExcessBlobGas)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the GnosisExecutionPayload object
func (g *GnosisExecutionPayload) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(g)
}
